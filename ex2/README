snirsh, giladam 
Student Snir Sharristh (305500001), Gil Adam (200139814)
EX: 2

FILES:
README -- this file
uthreads.cpp -- implementation of the thread library
Thread.cpp -- implementation of the Thread class methods
Thread.h -- Thread Class header

REMARKS:

ANSWERS:
1.  for example, when using a messaging application,
    we want to be able to still recieve new messages
    even while we are writing, like WhatsApp (Desktop).
    In order to do so we can create a task that schedules
    reading and writing from and to the WhatsApp remote 
    servers.
    In order to do so we can use user-level threads that
    schedule reading and writing correctly.
    As seen in class, user-level threads switching costs
    less that kernel-level.
    Because we are looking for better thread switching
    and to support alot of switching for the user,
    we'll prefer using user-level threads.
  
2.  ╔═══════════════════════════════╤════════════════════════╗
    ║ Pros                          │ Cons                   ║
    ╠═══════════════════════════════╪════════════════════════╣
    ║ each tab has more resources,  │ requires more resources║
    ║ explicitly, memory.           │ than kernel-level      ║
    ║                               │ threads                ║
    ╟───────────────────────────────┼────────────────────────╢
    ║ each tab can create it's own  │switching tab costs more║
    ║threads and doing so, can run  │because switching       ║
    ║ inner functions faster        |process's is more       ║
    ║                               |expansive than          ║ 
    ║                               |kernel-level threads    ║
    ╟───────────────────────────────┼────────────────────────╢
    ║ tabs wont effect each other,  │cannot share data       ║
    ║ if one is stuck, the rest     │between themselves      ║
    ║ won't suffer from it          │                        ║ 
    ╚═══════════════════════════════╧════════════════════════╝

3.  The shell's kill command is a command that recieves a 
    process identifier, in short PID.

    After running the command it invokes a kill() system call 
    which sends a signal to the process with the PID using a 
    system interrupt.
    using -s switch we can provoke which signal is sent, 
    default is SIGTERM, and we can choose to use SIGKILL.

    The difference between the signals is that:
    SIGTERM can be interrupted by a process signal handler, 
    and it can help us with the cleanup operation because 
    the handler is considering the process's state.
    Whereas the SIGKILL signal cannot be caught by a handler, 
    meaning that the signal will terminate the process 
    without it's state.

    when we use the keyboard interrupts we are invoking constant 
    interrupts to the process whereas the kill command invokes 
    the system call kill() as described.

4.  'real' time is a continuous and counted in every process,
    whereas the 'virtual' time is counted only in the process's 
    active computation time (when not blocked\suspended
     in any way).
    
    exapmle for 'real' time is the operating-system's clock, 
    this function always runs in the background and knows the 
    current system's time.
    
    example for 'virtual' time is when we want to give every 
    thread a constant running time, thus we need to calculate 
    each individual thread's active computation time, this 
    example is taken specifically from this exercise, because 
    the round-robbin algorithm that we use utilizes the threads 
    virtual timers.